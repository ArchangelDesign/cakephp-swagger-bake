<?php

namespace SwaggerBake\Test\TestCase\Lib\Operation;

use Cake\Routing\RouteBuilder;
use Cake\Routing\Router;
use Cake\TestSuite\TestCase;
use phpDocumentor\Reflection\DocBlockFactory;
use SwaggerBake\Lib\Annotation\SwagResponseSchema;
use SwaggerBake\Lib\CakeRoute;
use SwaggerBake\Lib\Configuration;
use SwaggerBake\Lib\OpenApi\Operation;
use SwaggerBake\Lib\OpenApi\Response;
use SwaggerBake\Lib\Operation\OperationResponse;
use SwaggerBake\Lib\OpenApi\Schema;

class OperationResponseTest extends TestCase
{
    public $fixtures = [
        'plugin.SwaggerBake.Employees',
    ];

    private $router;
    private $config;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $router = new Router();
        $router::scope('/api', function (RouteBuilder $builder) {
            $builder->setExtensions(['json']);
            $builder->resources('Employees', [
                'only' => ['index','create','delete','noResponsesDefined'],
                'map' => [
                    'noResponsesDefined'  => [
                        'method' => 'get',
                        'action' => 'noResponseDefined',
                        'path' => 'no-responses-defined'
                    ],
                ]
            ]);
        });
        $this->router = $router;

        $this->config = [
            'prefix' => '/api',
            'yml' => '/config/swagger-bare-bones.yml',
            'json' => '/webroot/swagger.json',
            'webPath' => '/swagger.json',
            'hotReload' => false,
            'exceptionSchema' => 'Exception',
            'requestAccepts' => ['application/x-www-form-urlencoded'],
            'responseContentTypes' => ['application/json'],
            'namespaces' => [
                'controllers' => ['\SwaggerBakeTest\App\\'],
                'entities' => ['\SwaggerBakeTest\App\\'],
                'tables' => ['\SwaggerBakeTest\App\\'],
            ]
        ];
    }

    public function testGetOperationWithAnnotatedResponse()
    {
        $config = new Configuration($this->config, SWAGGER_BAKE_TEST_APP);
        $cakeRoute = new CakeRoute($this->router, $config);

        $routes = $cakeRoute->getRoutes();
        $route = $routes['employees:index'];

        $operationResponse = new OperationResponse(
            $config,
            new Operation(),
            DocBlockFactory::createInstance()->create('/** @throws Exception */'),
            [
                new SwagResponseSchema([
                    'refEntity' => '',
                    'httpCode' => 200,
                    'description' => '',
                    'mimeType' => '',
                    'schemaType' => '',
                    'schemaFormat' => ''
                ]),
            ],
            $route,
            null
        );

        $operation = $operationResponse->getOperationWithResponses();

        $this->assertInstanceOf(Response::class, $operation->getResponseByCode(200));
        $this->assertInstanceOf(Response::class, $operation->getResponseByCode(500));
    }

    public function testGetOperationWithSchemaResponse()
    {
        $config = new Configuration($this->config, SWAGGER_BAKE_TEST_APP);
        $cakeRoute = new CakeRoute($this->router, $config);

        $routes = $cakeRoute->getRoutes();
        $route = $routes['employees:add'];

        $schema = (new Schema())
            ->setName('Employee')
            ->setType('object')
        ;

        $operationResponse = new OperationResponse(
            $config,
            new Operation(),
            DocBlockFactory::createInstance()->create('/**  */'),
            [],
            $route,
            $schema
        );

        $operation = $operationResponse->getOperationWithResponses();

        $this->assertInstanceOf(Response::class, $operation->getResponseByCode(200));
    }

    public function testAddOperationWithNoResponseDefined()
    {
        $config = new Configuration($this->config, SWAGGER_BAKE_TEST_APP);
        $cakeRoute = new CakeRoute($this->router, $config);

        $routes = $cakeRoute->getRoutes();
        $route = $routes['employees:add'];

        $operationResponse = new OperationResponse(
            $config,
            new Operation(),
            DocBlockFactory::createInstance()->create('/**  */'),
            [],
            $route,
            null
        );

        $operation = $operationResponse->getOperationWithResponses();
        $response = $operation->getResponseByCode(200);
        $this->assertNotEmpty($response);

        $content = $response->getContentByMimeType('application/json');

        $this->assertNotEmpty($content);
        $this->assertNotEmpty($content->getSchema());
    }

    public function testDeleteActionResponseWithHttp204()
    {
        $config = new Configuration($this->config, SWAGGER_BAKE_TEST_APP);
        $cakeRoute = new CakeRoute($this->router, $config);

        $routes = $cakeRoute->getRoutes();
        $route = $routes['employees:delete'];

        $operationResponse = new OperationResponse(
            $config,
            new Operation(),
            DocBlockFactory::createInstance()->create('/**  */'),
            [],
            $route,
            null
        );

        $operation = $operationResponse->getOperationWithResponses();
        $this->assertNotEmpty($operation->getResponseByCode(204));
    }


    public function testNoResponseDefined()
    {
        $config = new Configuration($this->config, SWAGGER_BAKE_TEST_APP);
        $cakeRoute = new CakeRoute($this->router, $config);

        $routes = $cakeRoute->getRoutes();
        $route = $routes['employees:noresponsedefined'];

        $operationResponse = new OperationResponse(
            $config,
            new Operation(),
            DocBlockFactory::createInstance()->create('/**  */'),
            [],
            $route,
            null
        );

        $operation = $operationResponse->getOperationWithResponses();
        $response = $operation->getResponseByCode(200);
        $this->assertNotEmpty($response);

        $content = $response->getContentByMimeType('application/json');
        $this->assertNotEmpty($content);
        $this->assertNotEmpty($content->getSchema());
    }
}