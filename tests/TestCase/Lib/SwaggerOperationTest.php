<?php


namespace SwaggerBake\Test\TestCase\Lib;

use Cake\Routing\Router;
use Cake\Routing\RouteBuilder;
use Cake\TestSuite\TestCase;
use SwaggerBake\Lib\AnnotationLoader;
use SwaggerBake\Lib\CakeModel;
use SwaggerBake\Lib\CakeRoute;
use SwaggerBake\Lib\Configuration;
use SwaggerBake\Lib\Swagger;

class SwaggerOperationTest extends TestCase
{
    /** @var string[] */
    public $fixtures = [
        'plugin.SwaggerBake.DepartmentEmployees',
        'plugin.SwaggerBake.Departments',
        'plugin.SwaggerBake.Employees',
        'plugin.SwaggerBake.EmployeeSalaries',
    ];

    /** @var Router  */
    private $router;

    /** @var array */
    private $config;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $router = new Router();
        $router::scope('/api', function (RouteBuilder $builder) {
            $builder->setExtensions(['json']);
            $builder->resources('Employees', [
                'map' => [
                    'customGet' => [
                        'action' => 'customGet',
                        'method' => 'GET',
                        'path' => 'custom-get'
                    ],
                    'customHidden' => [
                        'action' => 'customHidden',
                        'method' => 'GET',
                        'path' => 'custom-hidden'
                    ],
                ]
            ]);
            $builder->resources('Departments', function (RouteBuilder $routes) {
                $routes->resources('DepartmentEmployees');
            });
            $builder->resources('EmployeeSalaries');
        });
        $this->router = $router;

        $this->config = [
            'prefix' => '/api',
            'yml' => '/config/swagger-bare-bones.yml',
            'json' => '/webroot/swagger.json',
            'webPath' => '/swagger.json',
            'hotReload' => false,
            'exceptionSchema' => 'Exception',
            'requestAccepts' => ['application/x-www-form-urlencoded'],
            'responseContentTypes' => ['application/json'],
            'namespaces' => [
                'controllers' => ['\SwaggerBakeTest\App\\'],
                'entities' => ['\SwaggerBakeTest\App\\'],
                'tables' => ['\SwaggerBakeTest\App\\'],
            ]
        ];

        AnnotationLoader::load();
    }

    public function testCrudOperationsExist()
    {
        $configuration = new Configuration($this->config, SWAGGER_BAKE_TEST_APP);

        $cakeRoute = new CakeRoute($this->router, $configuration);
        $swagger = new Swagger(new CakeModel($cakeRoute, $configuration));

        $arr = json_decode($swagger->toString(), true);

        $this->assertArrayHasKey('get', $arr['paths']['/employees']);
        $this->assertArrayHasKey('post', $arr['paths']['/employees']);
        $this->assertArrayHasKey('get', $arr['paths']['/employees/{id}']);
        $this->assertArrayHasKey('patch', $arr['paths']['/employees/{id}']);
        $this->assertArrayHasKey('delete', $arr['paths']['/employees/{id}']);

    }

    public function testHiddenOperation()
    {
        $configuration = new Configuration($this->config, SWAGGER_BAKE_TEST_APP);

        $cakeRoute = new CakeRoute($this->router, $configuration);
        $swagger = new Swagger(new CakeModel($cakeRoute, $configuration));

        $arr = json_decode($swagger->toString(), true);

        $this->assertArrayNotHasKey('/employees/custom-hidden', $arr['paths']);
    }

    public function testExceptionResponseSchema()
    {
        $configuration = new Configuration($this->config, SWAGGER_BAKE_TEST_APP);

        $cakeRoute = new CakeRoute($this->router, $configuration);
        $swagger = new Swagger(new CakeModel($cakeRoute, $configuration));

        $arr = json_decode($swagger->toString(), true);

        $responses = $arr['paths']['/employees/custom-get']['get']['responses'];

        $this->assertArrayHasKey(400, $responses);
        $this->assertArrayHasKey(401, $responses);
        $this->assertArrayHasKey(403, $responses);
        $this->assertArrayHasKey(500, $responses);
    }

    public function testYmlPathOperationTakesPrecedence()
    {
        $config = $this->config;
        $config['yml'] = '/config/swagger-with-existing.yml';
        $configuration = new Configuration($config, SWAGGER_BAKE_TEST_APP);

        $cakeRoute = new CakeRoute($this->router, $configuration);
        $swagger = new Swagger(new CakeModel($cakeRoute, $configuration));

        $arr = json_decode($swagger->toString(), true);

        $this->assertArrayHasKey('/employee-salaries', $arr['paths']);
        $this->assertArrayHasKey('get', $arr['paths']['/employee-salaries']);

        $this->assertEquals('phpunit test string', $arr['paths']['/employee-salaries']['get']['description']);
    }
}